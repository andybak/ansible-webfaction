#! /usr/bin/python
# Create webfaction website

import socket
import xmlrpclib
from ansible.module_utils.basic import *

webfaction = xmlrpclib.ServerProxy('https://api.webfaction.com/')

def main():

    module = AnsibleModule(
        argument_spec = dict(
            name = dict(required=True, default=None),
            state = dict(required=False, default='present'),
            # You can specify an IP address or hostname.
            host = dict(required=True, default=None),
            https = dict(required=False, choices=BOOLEANS, default='false'),
            subdomains = dict(required=False, default=[]),
            site_apps = dict(required=False, default=[]),
            login_name = dict(required=True),
            login_password = dict(required=True),
        ),
        supports_check_mode=True
    )
    site_name  = module.params['name']
    site_state = module.params['state']
    site_host = module.params['host']
    site_ip = socket.gethostbyname(site_host)

    session_id, account = webfaction.login(
        module.params['login_name'],
        module.params['login_password']
    )

    site_list = webfaction.list_websites(session_id)
    site_map = dict([(i['name'], i) for i in site_list])
    existing_site = site_map.get(site_name)

    result = {}
    
    # Here's where the real stuff happens

    if site_state == 'present':

        # Does a site with this name already exist?
        if existing_site:

            # If yes, but it's on a different IP address, then fail.
            # If we wanted to allow relocation, we could add a 'relocate=true' option
            # which would get the existing IP address, delete the site there, and create it
            # at the new address.  A bit dangerous, perhaps, so for now we'll require manual
            # deletion if it's on another host.

            if existing_site['ip'] != site_ip:
                module.fail_json(msg="Website already exists with a different IP address. Please fix by hand.")

            # If it's on this host and the key parameters are the same, nothing needs to be done.
            
            if (existing_site['https'] == module.boolean(module.params['https'])) and \
               (set(existing_site['subdomains']) == set(module.params['subdomains'])) and \
               (dict(existing_site['website_apps']) == dict(module.params['site_apps'])):
                module.exit_json(
                    changed = False
                )

        positional_args = [ 
            session_id, site_name, site_ip, 
            module.boolean(module.params['https']),
            module.params['subdomains'],
        ]
        for a in module.params['site_apps']:
            positional_args.append( (a[0], a[1]) )

        if not module.check_mode:
            # If this isn't a dry run, create or modify the site
            result.update(
                    webfaction.create_website(
                        *positional_args
                    ) if not existing_site else webfaction.update_website (
                        *positional_args
                    )
            )

    elif site_state == 'absent':

        # If the site's already not there, nothing changed.
        if not existing_site:
            module.exit_json(
                changed = False,
            )

        if not module.check_mode:
            # If this isn't a dry run, delete the site
            result.update(
                webfaction.delete_website(session_id, site_name, site_ip)
            )

    else:
        module.fail_json(msg="Unknown state specified: {}".format(site_state))

    module.exit_json(
        changed = True,
        result = result
    )

# The conventional ending
main()

