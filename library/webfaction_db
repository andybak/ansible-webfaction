#! /usr/bin/python
# Create webfaction database

import socket
import xmlrpclib
from ansible.module_utils.basic import *

webfaction = xmlrpclib.ServerProxy('https://api.webfaction.com/')

def main():

    module = AnsibleModule(
        argument_spec = dict(
            name = dict(required=True, default=None),
            state = dict(required=False, default='present'),
            # You can specify an IP address or hostname.
            type = dict(required=True, default=None),
            password = dict(required=False, default=None),
            login_name = dict(required=True),
            login_passwd = dict(required=True),
        ),
        supports_check_mode=True
    )
    db_name  = module.params['name']
    db_state = module.params['state']
    db_type  = module.params['type']
    db_passwd = module.params['password']

    session_id, account = webfaction.login(
        module.params['login_name'],
        module.params['login_passwd']
    )

    db_list = webfaction.list_dbs(session_id)
    db_map = dict([(i['name'], i) for i in db_list])
    existing_db = db_map.get(db_name)

    result = {}
    
    # Here's where the real stuff happens

    if db_state == 'present':

        # Does an app with this name already exist?
        if existing_db:
            # Yes, but of a different type - fail
            if existing_db['db_type'] != db_type:
                module.fail_json(msg="Database already exists but is a different type. Please fix by hand.")

            # If it exists with the right type, we don't change anything.
            module.exit_json(
                changed = False,
            )


        if not module.check_mode:
            # If this isn't a dry run, create the app
            # print positional_args
            result.update(
                webfaction.create_db(
                    session_id, db_name, db_type, db_passwd
                )
            )

    elif db_state == 'absent':

        # If the app's already not there, nothing changed.
        if not existing_db:
            module.exit_json(
                changed = False,
            )

        if not module.check_mode:
            # If this isn't a dry run, delete the app
            result.update(
                webfaction.delete_db(session_id, db_name, db_type)
            )

    else:
        module.fail_json(msg="Unknown state specified: {}".format(db_state))

    module.exit_json(
        changed = True,
        result = result
    )

# The conventional ending
main()

